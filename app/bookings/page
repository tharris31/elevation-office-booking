"use client";
import { useEffect, useState } from "react";
import { supabase } from "../../lib/supabaseClient";

function toTimestamp(dateStr, timeStr) {
  // date "2025-09-21", time "14:00" → ISO string
  return new Date(`${dateStr}T${timeStr}:00`).toISOString();
}

export default function BookingsPage() {
  const [loading, setLoading] = useState(true);
  const [locations, setLocations] = useState([]);
  const [locationId, setLocationId] = useState(null);
  const [rooms, setRooms] = useState([]);
  const [roomId, setRoomId] = useState(null);
  const [date, setDate] = useState("");
  const [startTime, setStartTime] = useState("");
  const [endTime, setEndTime] = useState("");
  const [notes, setNotes] = useState("");
  const [bookings, setBookings] = useState([]);

  useEffect(() => {
    (async () => {
      // require login
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) { window.location.href = "/login"; return; }

      const { data: locs } = await supabase.from("locations").select("id,name").order("name");
      setLocations(locs ?? []);
      if (locs?.length) setLocationId(locs[0].id);
      setLoading(false);
    })();
  }, []);

  useEffect(() => {
    if (!locationId) return;
    (async () => {
      const { data } = await supabase.from("rooms").select("id,name").eq("location_id", locationId).order("name");
      setRooms(data ?? []);
      setRoomId(data?.[0]?.id ?? null);
    })();
  }, [locationId]);

  useEffect(() => {
    if (!roomId) { setBookings([]); return; }
    (async () => {
      const now = new Date().toISOString();
      const { data } = await supabase
        .from("bookings")
        .select("id,start_time,end_time,notes")
        .eq("room_id", roomId)
        .gte("end_time", now)
        .order("start_time");
      setBookings(data ?? []);
    })();
  }, [roomId]);

  async function createBooking(e) {
    e.preventDefault();
    if (!roomId || !date || !startTime || !endTime) { alert("Pick date and times."); return; }

    const start = toTimestamp(date, startTime);
    const end = toTimestamp(date, endTime);

    if (new Date(end) <= new Date(start)) { alert("End must be after start."); return; }

    // conflict check: any overlap for this room?
    const { data: conflicts, error: confErr } = await supabase
      .from("bookings")
      .select("id")
      .eq("room_id", roomId)
      .or(`and(start_time.lt.${end},end_time.gt.${start})`); // overlap if existing starts before end AND ends after start

    if (confErr) { alert(confErr.message); return; }
    if (conflicts && conflicts.length) { alert("Time conflicts with an existing booking."); return; }

    // need current user id for user_id column
    const { data: { user } } = await supabase.auth.getUser();
    const { error } = await supabase.from("bookings").insert({
      room_id: roomId,
      user_id: user.id,
      start_time: start,
      end_time: end,
      notes: notes || null
    });

    if (error) { alert(error.message); return; }

    setNotes(""); // refresh list
    const now = new Date().toISOString();
    const { data } = await supabase
      .from("bookings")
      .select("id,start_time,end_time,notes")
      .eq("room_id", roomId)
      .gte("end_time", now)
      .order("start_time");
    setBookings(data ?? []);
    alert("Booking created.");
  }

  if (loading) return <p>Loading…</p>;

  return (
    <main>
      <h1>Bookings</h1>

      <div style={{ display:"grid", gridTemplateColumns:"1fr 1fr", gap:16, maxWidth:700 }}>
        <div>
          <label>Location</label><br />
          <select value={locationId ?? ""} onChange={e=>setLocationId(Number(e.target.value))}>
            {locations.map(l => <option key={l.id} value={l.id}>{l.name}</option>)}
          </select>
        </div>
        <div>
          <label>Room</label><br />
          <select value={roomId ?? ""} onChange={e=>setRoomId(Number(e.target.value))}>
            {rooms.map(r => <option key={r.id} value={r.id}>{r.name}</option>)}
          </select>
        </div>

        <form onSubmit={createBooking} style={{ gridColumn:"1 / -1", display:"grid", gridTemplateColumns:"repeat(4, 1fr)", gap:12, alignItems:"end", marginTop:8 }}>
          <div>
            <label>Date</label><br />
            <input type="date" value={date} onChange={e=>setDate(e.target.value)} required />
          </div>
          <div>
            <label>Start</label><br />
            <input type="time" value={startTime} onChange={e=>setStartTime(e.target.value)} required />
          </div>
          <div>
            <label>End</label><br />
            <input type="time" value={endTime} onChange={e=>setEndTime(e.target.value)} required />
          </div>
          <div>
            <label>Notes</label><br />
            <input value={notes} onChange={e=>setNotes(e.target.value)} placeholder="Optional" />
          </div>
          <div style={{ gridColumn:"1 / -1" }}>
            <button type="submit">Create booking</button>
          </div>
        </form>
      </div>

      <h3 style={{ marginTop: 24 }}>Upcoming bookings</h3>
      <ul>
        {bookings.map(b => (
          <li key={b.id}>
            {new Date(b.start_time).toLocaleString()} – {new Date(b.end_time).toLocaleTimeString([], {hour:"2-digit", minute:"2-digit"})}
            {b.notes ? ` — ${b.notes}` : ""}
          </li>
        ))}
        {!bookings.length && <li>No upcoming bookings for this room.</li>}
      </ul>
    </main>
  );
}
